import { IMarketData, IMarketDataPoint } from '../models/analyses';
import dotenv from 'dotenv';
import axios from 'axios';
import { DateTime } from 'luxon';

// Generated by https://quicktype.io

export interface IMarketSummaryResponse {
  marketSummaryResponse: MarketSummaryResponse;
}

interface MarketSummaryResponse {
  result: Result[];
  error: string | null;
}

interface Result {
  fullExchangeName: string;
  exchangeTimezoneName: string;
  symbol: string;
  regularMarketChange: RegularMarket;
  gmtOffSetMilliseconds: number;
  exchangeDataDelayedBy: number;
  firstTradeDateMilliseconds: number;
  language: string;
  regularMarketTime: RegularMarket;
  regularMarketChangePercent: RegularMarket;
  exchangeTimezoneShortName: string;
  quoteType: string;
  marketState: string;
  regularMarketPrice: RegularMarket;
  market: string;
  quoteSourceName?: string;
  priceHint?: number;
  tradeable: boolean;
  sourceInterval: number;
  exchange: string;
  region: string;
  triggerable: boolean;
  regularMarketPreviousClose: RegularMarket;
  shortName?: string;
  currency?: string;
  headSymbolAsString?: string;
  headSymbol?: boolean;
  contractSymbol?: boolean;
  longName?: string;
}

interface RegularMarket {
  raw: number;
  fmt: string;
}

/**
 * These are the symbols of the markets that are fetched:
 * ^FCHI,^STOXX50E,^DJI,EURUSD=X,GC=F,BTC-EUR,^CMC200,CL=F,^GDAXI,^FTSE,^IXIC,^GSPC,^N225,^HSI,GBPUSD=X
 */

dotenv.config();

const API_KEY = process.env.YAHOO_API_KEY || '';
const URL = process.env.YAHOO_URL || '';

export const getMarketData = async (date: DateTime): Promise<IMarketData> => {
  console.log('Fetching market data for' + date.toString());

  try {
    // const response = testData; // Debug
    const response = await axios.get<IMarketSummaryResponse>(URL, {
      headers: { Accept: 'application/json', 'X-API-KEY': API_KEY },
    });
    const parsed = parseRawMarketData(response.data, date);

    return parsed;
  } catch (err) {
    console.log('Failed to fetch market data: ');
    console.log(err);
  }

  return {
    timestamp: date.toMillis(),
    data: [],
  };
};

const parseRawMarketData = (
  data: IMarketSummaryResponse,
  date: DateTime
): IMarketData => {
  const results = {
    timestamp: date.toMillis(),
    data: [] as IMarketDataPoint[],
  };

  // TODO: Some debugging code here
  console.log(
    `Parsing market data for ${data.marketSummaryResponse.result.length} markets.`
  );

  data.marketSummaryResponse.result.forEach((market) => {
    //TODO:  Some debugging code
    console.log(
      `Found data for symbol: ${market.symbol} with price ${market.regularMarketPrice.raw}.`
    );

    results.data.push({
      market: market.fullExchangeName,
      price: market.regularMarketPrice.raw,
      symbol: market.symbol,
    });
  });

  return results;
};
